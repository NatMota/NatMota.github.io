<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Your Site's RSS Feed]]></title><description><![CDATA[This is Natanael's Portfolio Site]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 02 Apr 2024 23:15:57 GMT</lastBuildDate><item><title><![CDATA[Parallels between working remotely and designing APIs]]></title><description><![CDATA[Parallels between working remotely and designing APIs ]]></description><link>https://www.natslabs.com/blog/parallels-remote-working</link><guid isPermaLink="false">https://www.natslabs.com/blog/parallels-remote-working</guid><pubDate>Tue, 09 May 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Going one layer up&lt;/h2&gt;&lt;p&gt;Remote work has changed how we shape our relationships, communities, and work - trading ‚Äòrealness‚Äô with variety and volume. Whatever doesn‚Äôt fit in the data cable must stay behind, for better or for worse. And we&amp;#39;re fairly used to that, if you look all the way back to smoke signals.&lt;/p&gt;&lt;p&gt;APIs are one way computers can show up remotely for work &lt;a href=&quot;https://emojipedia.org/grinning-face-with-sweat/&quot;&gt;üòÖ&lt;/a&gt;. If you haven‚Äôt heard of them, they stand for Application Programming Interfaces, meaning you can make machines talk together. Jeff Lawson from Twilio has written a &lt;a href=&quot;https://www.twilio.com/blog/ask-your-developer-a-playbook-available-now&quot;&gt;very approachable book&lt;/a&gt; introducing them.&lt;/p&gt;&lt;p&gt;He uses banking as an example in the book. You might have judged a bank by how nice the teller was, how long you needed to queue, and if they had a local branch close to where you lived. ‚ÄúNowadays your bank is a mobile app and you like your bank if the software is fast, if it is bug free and if they regularly update it with new features and functionality that makes your life better‚Äù - wrote Jeff.&lt;/p&gt;&lt;p&gt;A banking mobile app may have to call on several services, some of them based on your phone‚Äôs operating system, others to authenticate you and so on... for a task you may want to accomplish, like exchanging money or asking for a loan. If there is no human in the middle, it‚Äôs quite likely there is an API - a listening machine waiting for a requesting machine to say hello, and back again.&lt;/p&gt;&lt;p&gt;If you want to send money to a friend in another bank, then your bank has to have an established relationship with their bank to be able to do it. You may not remember the time when this would take hours to days, excluding weekends, even within the UK! You guessed it, they let other banks &lt;a href=&quot;https://www.wearepay.uk/what-we-do/payment-systems/faster-payment-system/how-faster-payments-work/&quot;&gt;use an API for it&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;It makes tremendous economical sense for a lot of companies, so APIs and their kin are not just shaping modern technology but business models as well. The &lt;a href=&quot;https://segment.com/blog/why-we-re-transitioning-to-api-first/&quot;&gt;Porter value chain&lt;/a&gt; becomes more interconnected and you can now put a whole company - with hundreds, thousands of people - behind an API. APIs can very quickly be improved on, served to many users and even get connected to other APIs. You just have to make sure you respect the rules of building APIs, because now you‚Äôre talking volume - for the most part. &lt;/p&gt;&lt;p&gt;This means standardisation - whatever doesn‚Äôt fit in the API pipe must stay behind, for better or for worse. You can browse &lt;a href=&quot;https://stripe.com/docs/api&quot;&gt;Stripe‚Äôs&lt;/a&gt;  or &lt;a href=&quot;https://shopify.dev/docs/api&quot;&gt;Shopify‚Äôs&lt;/a&gt; API docs for a visual reference. As you look through the functionality, notice how they don‚Äôt promise the whole world, but very specific, targeted and regimented operations to help you use their service.&lt;/p&gt;&lt;p&gt;This also doesn&amp;#39;t mean there aren&amp;#39;t other forms of machine-machine communication today - this field is always evolving - but using APIs  works really well today with integration, repetitive tasks and analysis.&lt;/p&gt;&lt;h2&gt;An example&lt;/h2&gt;&lt;p&gt;We‚Äôre going to play with APIs at a very high level and in a way I hope you find approachable. We‚Äôll use your phone to listen to another machine using the power of APIs.&lt;/p&gt;&lt;p&gt;Download &lt;a href=&quot;https://ntfy.sh/&quot;&gt;ntfy&lt;/a&gt; on your phone for this part. (I‚Äôm not associated with them) This will let you receive push notifications via PUT/POST (a topic for another day) for free on your phone. Its free to use, its open source, and its visible to other people unless you pay for a private channel, but for our purposes its perfectly fine.&lt;/p&gt;&lt;p&gt;Think of a title for your subscription. I‚Äôm picking chocolate_chip_pancake.&lt;/p&gt;&lt;p&gt;Whilst I‚Äôm working on embedding this, you can still try it in a very simple app I built &lt;a href=&quot;https://l.linklyhq.com/l/1l8Ef&quot;&gt;here&lt;/a&gt;. Now make sure the title/topic is spelled the same way, and fire away! Sure enough, you will be able to receive your first ever notification, give or take a second üôÇ.&lt;/p&gt;&lt;p&gt;You can try the code yourself anywhere and it should work on most  terminals&lt;/p&gt;&lt;p&gt;&lt;code&gt;curl -d &amp;quot;It‚Äôs pancake time! ü•û&amp;quot; &lt;/code&gt;&lt;a href=&quot;http://ntfy.sh/chocolate_chip_pancake&quot;&gt;&lt;code&gt;ntfy.sh/chocolate_chip_pancake&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;When you use &lt;b&gt;&lt;code&gt;cURL&lt;/code&gt;&lt;/b&gt;, you give it the address of the server (the URL), the type of message you want to send, and any extra details the server needs to understand your message. Then, &lt;b&gt;&lt;code&gt;cURL&lt;/code&gt;&lt;/b&gt; takes care of delivering the message and showing you the server&amp;#39;s reply. Connected software everywhere makes use of these lower level tools to work. In this case, the ntfy server does the rest of the work of piping that message to your phone as a notification. There is more discussion of ntfy &lt;a href=&quot;https://news.ycombinator.com/item?id=33517944&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;&lt;h2&gt;Where were we again?&lt;/h2&gt;&lt;p&gt;Right, how to apply API design to working remotely. &lt;/p&gt;&lt;p&gt;Two things are apparent when you pick up the phone line to talk to another person - you probably wont be able to work faster, and its not really the same as being there.&lt;/p&gt;&lt;p&gt;When everyone is on a multiplex line, the plot thickens. You still can‚Äôt talk or chat over other people. Whatever communication is happening human to human, is done in a sequential way. And humans process information in a sequential way too. If you apply some principles of API design, you can make yourself, your team and your professional network work more effectively. The trick is to standardise the right interactions which you can do at volume, and letting go of more ‚Äògenuine‚Äô dimensions.&lt;/p&gt;&lt;p&gt;The point of APIs is that while they can be complex and have many functions, they should not be complicated to use. An API that takes a long time to implement is not a great API. There will always be a competitor around the corner with better usability - basically how quickly a user can achieve their goals with it.&lt;/p&gt;&lt;h2&gt;Making remote work more deliberate&lt;/h2&gt;&lt;p&gt;With that in mind, here are some API design rules of thumb that have interesting parallels to repetitive work and working remotely in a distributed way. Could you collaborate effectively with another human in a completely different timezone?&lt;/p&gt;&lt;p&gt;&lt;b&gt;Planning - API planning planning is always the most important step.  &lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Do you know what your goal is? How often do you review it?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;This year?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;This month?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Today?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Do you know what kind of work you will not do? Or delegate?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Are your boundaries well defined?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Are there any upcoming events that will affect your capacity to help effectively?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Clear communication - API &amp;#39;contracts&amp;#39; clearly define how they can be used and don&amp;#39;t hide inconsistent behaviour&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;How can you communicate more clearly?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;How can you communicate more regularly?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;How connected and informed do your teammates feel?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Collaboration and support - APIs often require collaboration between different teams or organisations to develop, maintain, and support them.&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Do you know your teammate‚Äôs goals?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Do you know their preferred way of collaborating?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Do you know how best to contribute to shared goals?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Documentation - A well-designed API must have clear, concise, and easily understood documentation to enable developers to integrate with it effectively.&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Do you have a guide to how best to deal with yourself?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Managers in tech often create ‚Äòreadme‚Äô files, but you don‚Äôt have to be one to create yours. Some examples &lt;a href=&quot;https://hypercontext.com/blog/management-skills/49-manager-readmes&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Is your self documentation, your team‚Äôs documentation, and your organization‚Äôs documentation clear?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Do you have guidelines?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Do you keep your documentation fresh? &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Standardization - Consistent API design patterns, naming conventions, and error handling make it easier for developers to understand and use the API.&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;How well do you know your tools of the trade?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Are you aware of how you can update them in the future?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Are you comfortable with all of them?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Do you apply your tools, methods and processes consistently?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Scalability and performance - Good API design accounts for scalability and performance, ensuring that the API can handle growing numbers of users and data without degradation in quality.&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;How can you scale a team and maintain performance?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What are the tradeoffs there?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;How should you set goals for teams to promote collaboration?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What parts of your work are repetitive? Which ones may no longer be needed?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Work empathetically and testing&lt;/b&gt; - &lt;b&gt;A well-designed API should be easy to use and understand, minimising developer friction and promoting adoption.&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;What assumptions am I making by communicating or acting this way?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What happened the last time someone was confused with something I said?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;When you are communicating a new concept, method or to a new audience, how often do you test it first?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Flexibility and adaptability - A successful API should be able to evolve and adapt to changing requirements and technology trends without disrupting existing users.&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;When you introduce a new process, what do you keep the same?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;How do you plan for change?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Are there existing ‚Äòbuilding blocks‚Äô you could keep the same, instead of redoing it from scratch?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Are your processes and communication fault tolerant? Do they forgive genuine or systemic mistakes like cognitive biases?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Leverage your network! APIs are more powerful when they are connected together&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Do you know what skills there are on your network?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;How often do you leverage your network?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Does your network have a purpose?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Do you see potential links in your network you could make happen?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;And lastly, know when doing something in person would be more effective, if you have that luxury! &lt;/b&gt;&lt;/p&gt;</content:encoded></item></channel></rss>